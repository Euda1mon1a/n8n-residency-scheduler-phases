{
  "name": "Medical Residency Scheduler - Phase 2: Smart Resident Association (Absence-Aware)",
  "version": "2.0.0",
  "description": "Phase 2: Intelligent resident association with Phase 0/1 integration - uses field IDs for all Airtable operations",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [100, 400],
      "id": "trigger-phase2-start",
      "name": "Start Phase 2: Smart Resident Association"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appDgFtrU7njCKDW5",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "tbl17gcDUtXc14Rjv",
          "mode": "id"
        },
        "filterByFormula": "=AND(NOT(BLANK({fldHalfDayOfWeekBlocks})), NOT(BLANK({fldRotationTemplates})), {fldProcessingPhase} = 'Phase 1 - Smart Pairing')",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [300, 200],
      "id": "fetch-phase1-master-assignments",
      "name": "Fetch Phase 1 Master Assignments",
      "credentials": {
        "airtableTokenApi": {
          "id": "jaswG7byACjIoa6L",
          "name": "Airtable Personal Access Token account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appDgFtrU7njCKDW5",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "tbl3TfpZSGYGxlCIG",
          "mode": "id"
        },
        "filterByFormula": "=NOT(BLANK({fldq0D4a6GevQSbhz}))",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [300, 300],
      "id": "fetch-residency-block-schedule",
      "name": "Fetch Residency Block Schedule",
      "credentials": {
        "airtableTokenApi": {
          "id": "jaswG7byACjIoa6L",
          "name": "Airtable Personal Access Token account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appDgFtrU7njCKDW5",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "tblTP62YOkF75o5aO",
          "mode": "id"
        },
        "filterByFormula": "=NOT(BLANK({fldDateOfDayOfWeekBlock}))",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [300, 400],
      "id": "fetch-half-day-blocks-reference",
      "name": "Fetch Half-Day Blocks Reference",
      "credentials": {
        "airtableTokenApi": {
          "id": "jaswG7byACjIoa6L",
          "name": "Airtable Personal Access Token account 2"
        }
      }
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [500, 350],
      "id": "merge-phase2-data",
      "name": "Merge Phase 2 Data"
    },
    {
      "parameters": {
        "jsCode": "\n// PHASE 2: SMART RESIDENT ASSOCIATION WITH ABSENCE AWARENESS\nconsole.log('=== PHASE 2: SMART RESIDENT ASSOCIATION (ABSENCE-AWARE) ===');\n\nconst allItems = $input.all();\nconsole.log(`Received ${allItems.length} items from merge`);\n\n// Field ID mappings for reference\nconst FIELD_IDS = {\n  // Master Assignments table\n  MA_HALF_DAY_OF_WEEK_BLOCKS: 'fldHalfDayOfWeekBlocks',\n  MA_ROTATION_TEMPLATES: 'fldRotationTemplates',\n  MA_PROCESSING_PHASE: 'fldProcessingPhase',\n  MA_RESIDENT_FROM_RBS: 'fldResidentFromRBS',\n  MA_PGY_LINK_FROM_RBS: 'fldPGYLinkFromRBS',\n  MA_RESIDENT_AVAILABLE: 'fldResidentAvailable',\n  MA_ASSIGNMENT_TYPE: 'fldAssignmentType',\n  MA_RESIDENT_SUBSTITUTION_APPLIED: 'fldResidentSubstitutionApplied',\n  MA_FINAL_ACTIVITY_NAME: 'fldFinalActivityName',\n  MA_ASSIGNMENT_SCORE: 'fldAssignmentScore',\n  MA_ASSIGNMENT_DATE: 'fldAssignmentDate',\n  MA_ACTIVITY_FROM_ROTATION_TEMPLATES: 'fldActivityFromRotationTemplates',\n  \n  // Residency Block Schedule table (tbl3TfpZSGYGxlCIG)\n  RBS_NAME: 'fld9jU1b60KFqZSWx',\n  RBS_RESIDENT: 'fldq0D4a6GevQSbhz',\n  RBS_BLOCK: 'fldSm2tVzmgKpwAMH',\n  RBS_ROTATION: 'fldxZH0CjlYJ8V4eW',\n  RBS_NOTES: 'fldJVpmB8hCfR6u2j',\n  RBS_START_DATE: 'fldPzPmCt5xRr9LXd',\n  RBS_END_DATE: 'fld7GHAvlhUBuNZAm',\n  RBS_STATUS: 'fldCQ0kP3xNtQRPbK',\n  RBS_PGY_YEAR: 'fld1gvZ5vL0gkrJ4W',\n  RBS_HALF_DAY_ASSIGNMENTS: 'fldxfHj0DXhYEVGlD',\n  RBS_ROTATION_DURATION: 'fldAXvAJh4gSvEPmF',\n  RBS_AIRTABLE_RECORD_ID: 'fldE5Db77xRAEPrFl',\n  \n  // Half-Day Blocks Reference table\n  HD_HDOWOB_ID: 'fldHDoWoBID',\n  HD_DATE_OF_DAY_OF_WEEK_BLOCK: 'fldDateOfDayOfWeekBlock',\n  HD_TIME_OF_DAY: 'fldTimeOfDay',\n  HD_DAY_OF_THE_WEEK_OF_BLOCK: 'fldDayOfTheWeekOfBlock',\n  HD_BLOCK: 'fldBlock',\n  HD_WEEK_OF_THE_BLOCK: 'fldWeekOfTheBlock'\n};\n\n// Separate data by type\nlet masterAssignments = [];\nlet residencySchedule = [];\nlet halfDayBlocks = [];\nlet phase0AbsenceData = null;\nlet phase1Results = null;\n\nallItems.forEach(item => {\n  const data = item.json;\n  \n  // Identify data source by checking key fields (using field IDs where possible)\n  if (data[FIELD_IDS.MA_HALF_DAY_OF_WEEK_BLOCKS] && data[FIELD_IDS.MA_ROTATION_TEMPLATES] && data[FIELD_IDS.MA_PROCESSING_PHASE]) {\n    masterAssignments.push(data);\n  } else if (data[FIELD_IDS.RBS_RESIDENT] && data['Block Number'] && data['PGY Level']) {\n    residencySchedule.push(data);\n  } else if (data['HDoWoB ID'] && data[FIELD_IDS.HD_DATE_OF_DAY_OF_WEEK_BLOCK]) {\n    halfDayBlocks.push(data);\n  } else if (data.phase === 0 && data.absence_data) {\n    phase0AbsenceData = data.absence_data;\n  } else if (data.phase === 1 && data.smart_pairings) {\n    phase1Results = data;\n  }\n});\n\nconsole.log(`Found: ${masterAssignments.length} master assignments from Phase 1`);\nconsole.log(`Found: ${residencySchedule.length} residency schedule records`);\nconsole.log(`Found: ${halfDayBlocks.length} half-day block references`);\nconsole.log(`Phase 0 absence data: ${phase0AbsenceData ? 'Available' : 'MISSING - CRITICAL ERROR'}`);\nconsole.log(`Phase 1 results: ${phase1Results ? 'Available' : 'Using fallback from master assignments'}`);\n\nif (!phase0AbsenceData) {\n  console.error('❌ CRITICAL ERROR: Phase 0 absence data not found!');\n  console.error('Phase 2 requires Phase 0 absence data for resident availability checking');\n  return [{\n    json: {\n      phase: 2,\n      success: false,\n      error: 'Phase 0 absence data required but not found',\n      next_phase: null\n    }\n  }];\n}\n\n// Extract absence data from Phase 0\nconst residentAbsences = phase0AbsenceData.residentAbsences || {};\nconst facultyAbsences = phase0AbsenceData.facultyAbsences || {};\nconst residentReference = phase0AbsenceData.residentReference || {};\n\nconsole.log(`Loaded resident absences for ${Object.keys(residentAbsences).length} residents`);\nconsole.log(`Faculty absence data available for verification: ${Object.keys(facultyAbsences).length} faculty`);\n\n// Create half-day lookup for date/time resolution\nconst halfDayLookup = new Map();\nhalfDayBlocks.forEach(halfDay => {\n  const halfDayId = halfDay.id || halfDay['HDoWoB ID'];\n  halfDayLookup.set(halfDayId, {\n    id: halfDayId,\n    date: halfDay[FIELD_IDS.HD_DATE_OF_DAY_OF_WEEK_BLOCK] || halfDay['Date of Day of the Week of Block'],\n    timeOfDay: halfDay[FIELD_IDS.HD_TIME_OF_DAY] || halfDay['Time of Day'],\n    dayOfWeek: halfDay[FIELD_IDS.HD_DAY_OF_THE_WEEK_OF_BLOCK] || halfDay['Day of the Week of Block'],\n    blockNumber: Array.isArray(halfDay[FIELD_IDS.HD_BLOCK] || halfDay['Block']) ? (halfDay[FIELD_IDS.HD_BLOCK] || halfDay['Block'])[0] : (halfDay[FIELD_IDS.HD_BLOCK] || halfDay['Block']),\n    weekOfBlock: Array.isArray(halfDay[FIELD_IDS.HD_WEEK_OF_THE_BLOCK] || halfDay['Week of the Block']) ? (halfDay[FIELD_IDS.HD_WEEK_OF_THE_BLOCK] || halfDay['Week of the Block'])[0] : (halfDay[FIELD_IDS.HD_WEEK_OF_THE_BLOCK] || halfDay['Week of the Block'])\n  });\n});\n\n// Create resident schedule lookup by block and week\nconst residentScheduleLookup = new Map();\nresidencySchedule.forEach(schedule => {\n  const blockNumber = schedule['Block Number'];\n  const weekNumber = schedule['Week of Block'];\n  const residentIds = schedule[FIELD_IDS.RBS_RESIDENT] || schedule['Resident'] || [];\n  const pgyLevel = schedule['PGY Level'];\n  const residentNames = schedule['Resident Name'];\n  \n  if (blockNumber && weekNumber && residentIds.length > 0) {\n    const key = `${blockNumber}-${weekNumber}`;\n    \n    if (!residentScheduleLookup.has(key)) {\n      residentScheduleLookup.set(key, []);\n    }\n    \n    residentIds.forEach((residentId, index) => {\n      residentScheduleLookup.get(key).push({\n        residentId: residentId,\n        residentName: Array.isArray(residentNames) ? residentNames[index] : residentNames,\n        pgyLevel: pgyLevel,\n        blockNumber: blockNumber,\n        weekNumber: weekNumber,\n        scheduleRecordId: schedule.id\n      });\n    });\n  }\n});\n\nconsole.log(`Created resident schedule lookup for ${residentScheduleLookup.size} block-week combinations`);\n\n// SMART RESIDENT ASSOCIATION ENGINE\nclass SmartResidentAssociationEngine {\n  constructor(residentAbsences, halfDayLookup, residentScheduleLookup) {\n    this.residentAbsences = residentAbsences;\n    this.halfDayLookup = halfDayLookup;\n    this.residentScheduleLookup = residentScheduleLookup;\n  }\n  \n  isResidentAvailable(residentId, date, timeOfDay) {\n    if (!this.residentAbsences[residentId]) return true;\n    if (!this.residentAbsences[residentId][date]) return true;\n    \n    const absence = this.residentAbsences[residentId][date];\n    return !(absence.timeOfDay === 'All Day' || absence.timeOfDay === timeOfDay);\n  }\n  \n  getResidentAbsence(residentId, date) {\n    if (!this.residentAbsences[residentId] || !this.residentAbsences[residentId][date]) {\n      return null;\n    }\n    return this.residentAbsences[residentId][date];\n  }\n  \n  applyResidentAbsenceSubstitution(originalActivity, residentId, date) {\n    const residentAbsence = this.getResidentAbsence(residentId, date);\n    \n    if (!residentAbsence) {\n      return {\n        finalActivity: originalActivity,\n        absenceApplied: false,\n        residentAvailable: true\n      };\n    }\n    \n    return {\n      originalActivity: originalActivity,\n      finalActivity: residentAbsence.replacementActivity,\n      absenceApplied: true,\n      residentAvailable: false,\n      absenceInfo: {\n        absenceType: residentAbsence.absenceType,\n        comments: residentAbsence.comments,\n        residentId: residentId,\n        date: date,\n        originalAbsenceId: residentAbsence.originalAbsenceId,\n        educationalImpact: residentAbsence.educationalImpact\n      },\n      substitutionTemplate: residentAbsence.absenceTemplate\n    };\n  }\n  \n  findAvailableResidents(blockNumber, weekNumber, date, timeOfDay) {\n    const scheduleKey = `${blockNumber}-${weekNumber}`;\n    const scheduledResidents = this.residentScheduleLookup.get(scheduleKey) || [];\n    \n    const availableResidents = [];\n    const unavailableResidents = [];\n    \n    scheduledResidents.forEach(resident => {\n      if (this.isResidentAvailable(resident.residentId, date, timeOfDay)) {\n        availableResidents.push({\n          ...resident,\n          available: true,\n          absenceSubstitution: null\n        });\n      } else {\n        const substitution = this.applyResidentAbsenceSubstitution(\n          'Unknown Activity',\n          resident.residentId,\n          date\n        );\n        \n        unavailableResidents.push({\n          ...resident,\n          available: false,\n          absenceSubstitution: substitution\n        });\n      }\n    });\n    \n    return {\n      availableResidents: availableResidents,\n      unavailableResidents: unavailableResidents,\n      totalScheduled: scheduledResidents.length\n    };\n  }\n  \n  associateResidents(masterAssignment) {\n    const assignmentId = masterAssignment.id;\n    const halfDayIds = masterAssignment[FIELD_IDS.MA_HALF_DAY_OF_WEEK_BLOCKS] || masterAssignment['Half-Day of the Week of Blocks'] || [];\n    const rotationTemplateIds = masterAssignment[FIELD_IDS.MA_ROTATION_TEMPLATES] || masterAssignment['Rotation Templates'] || [];\n    \n    const primaryHalfDayId = Array.isArray(halfDayIds) ? halfDayIds[0] : halfDayIds;\n    const halfDayInfo = this.halfDayLookup.get(primaryHalfDayId);\n    \n    if (!halfDayInfo) {\n      return {\n        success: false,\n        reason: 'Half-day information not found',\n        assignmentId: assignmentId\n      };\n    }\n    \n    const { date, timeOfDay, blockNumber, weekOfBlock } = halfDayInfo;\n    \n    const residentLookupResult = this.findAvailableResidents(\n      blockNumber, weekOfBlock, date, timeOfDay\n    );\n    \n    if (residentLookupResult.totalScheduled === 0) {\n      return {\n        success: false,\n        reason: 'No residents scheduled for this block/week',\n        assignmentId: assignmentId,\n        searchCriteria: `Block ${blockNumber}, Week ${weekOfBlock}`\n      };\n    }\n    \n    const allEligibleResidents = [\n      ...residentLookupResult.availableResidents,\n      ...residentLookupResult.unavailableResidents\n    ];\n    \n    if (allEligibleResidents.length === 0) {\n      return {\n        success: false,\n        reason: 'No eligible residents found',\n        assignmentId: assignmentId\n      };\n    }\n    \n    allEligibleResidents.sort((a, b) => {\n      if (a.available && !b.available) return -1;\n      if (!a.available && b.available) return 1;\n      \n      const pgyOrder = { 'PGY-1': 3, 'PGY-2': 2, 'PGY-3': 1 };\n      return (pgyOrder[b.pgyLevel] || 0) - (pgyOrder[a.pgyLevel] || 0);\n    });\n    \n    const selectedResident = allEligibleResidents[0];\n    \n    let finalAssignment = {\n      assignmentId: assignmentId,\n      residentId: selectedResident.residentId,\n      residentName: selectedResident.residentName,\n      pgyLevel: selectedResident.pgyLevel,\n      residentAvailable: selectedResident.available,\n      absenceSubstitution: null,\n      originalActivity: masterAssignment[FIELD_IDS.MA_ACTIVITY_FROM_ROTATION_TEMPLATES] ? \n        masterAssignment[FIELD_IDS.MA_ACTIVITY_FROM_ROTATION_TEMPLATES][0] : \n        (masterAssignment['Activity (from Rotation Templates)'] ? masterAssignment['Activity (from Rotation Templates)'][0] : 'Unknown'),\n      finalActivity: null\n    };\n    \n    if (!selectedResident.available && selectedResident.absenceSubstitution) {\n      const substitution = this.applyResidentAbsenceSubstitution(\n        finalAssignment.originalActivity,\n        selectedResident.residentId,\n        date\n      );\n      \n      finalAssignment.absenceSubstitution = substitution;\n      finalAssignment.finalActivity = substitution.finalActivity;\n    } else {\n      finalAssignment.finalActivity = finalAssignment.originalActivity;\n    }\n    \n    return {\n      success: true,\n      assignmentId: assignmentId,\n      residentAssociation: finalAssignment,\n      alternativeResidents: allEligibleResidents.slice(1),\n      associationMetadata: {\n        halfDayId: primaryHalfDayId,\n        date: date,\n        timeOfDay: timeOfDay,\n        blockNumber: blockNumber,\n        weekOfBlock: weekOfBlock,\n        totalEligibleResidents: allEligibleResidents.length,\n        availableResidents: residentLookupResult.availableResidents.length,\n        unavailableResidents: residentLookupResult.unavailableResidents.length\n      }\n    };\n  }\n}\n\n// EXECUTE SMART RESIDENT ASSOCIATION\nconsole.log('\\n--- EXECUTING SMART RESIDENT ASSOCIATION ---');\n\nconst associationEngine = new SmartResidentAssociationEngine(\n  residentAbsences, halfDayLookup, residentScheduleLookup\n);\n\nconst residentAssociations = [];\nconst unassignedMasterAssignments = [];\nconst residentSubstitutions = [];\nconst blockStats = {};\n\nmasterAssignments.forEach((masterAssignment, index) => {\n  const halfDayIds = masterAssignment[FIELD_IDS.MA_HALF_DAY_OF_WEEK_BLOCKS] || masterAssignment['Half-Day of the Week of Blocks'] || [];\n  const primaryHalfDayId = Array.isArray(halfDayIds) ? halfDayIds[0] : halfDayIds;\n  const halfDayInfo = halfDayLookup.get(primaryHalfDayId);\n  const blockId = halfDayInfo?.blockNumber || 'Unknown';\n  \n  if (!blockStats[blockId]) {\n    blockStats[blockId] = { \n      associated: 0, \n      unassigned: 0, \n      residentSubstitutions: 0 \n    };\n  }\n  \n  const associationResult = associationEngine.associateResidents(masterAssignment);\n  \n  if (associationResult.success) {\n    const association = associationResult.residentAssociation;\n    \n    residentAssociations.push({\n      Master_Assignment_ID: associationResult.assignmentId,\n      Resident_ID: association.residentId,\n      Resident_Name: association.residentName,\n      PGY_Level: association.pgyLevel,\n      Resident_Available: association.residentAvailable,\n      Original_Activity: association.originalActivity,\n      Final_Activity: association.finalActivity,\n      Absence_Substitution: association.absenceSubstitution,\n      Alternative_Residents: associationResult.alternativeResidents,\n      Association_Metadata: associationResult.associationMetadata\n    });\n    \n    blockStats[blockId].associated++;\n    \n    if (association.absenceSubstitution && association.absenceSubstitution.absenceApplied) {\n      blockStats[blockId].residentSubstitutions++;\n      residentSubstitutions.push({\n        masterAssignmentId: associationResult.assignmentId,\n        residentId: association.residentId,\n        originalActivity: association.originalActivity,\n        substitutedActivity: association.finalActivity,\n        absenceInfo: association.absenceSubstitution.absenceInfo\n      });\n    }\n    \n  } else {\n    unassignedMasterAssignments.push({\n      Master_Assignment_ID: associationResult.assignmentId,\n      Block_ID: blockId,\n      Reason: associationResult.reason,\n      Search_Criteria: associationResult.searchCriteria || 'Not available'\n    });\n    \n    blockStats[blockId].unassigned++;\n  }\n  \n  if ((index + 1) % 100 === 0) {\n    console.log(`Processed ${index + 1}/${masterAssignments.length} master assignments`);\n  }\n});\n\nconst totalMasterAssignments = masterAssignments.length;\nconst totalAssociated = residentAssociations.length;\nconst totalResidentSubstitutions = residentSubstitutions.length;\nconst associationRate = totalMasterAssignments > 0 ? \n  ((totalAssociated / totalMasterAssignments) * 100).toFixed(1) : '0';\nconst substitutionRate = totalAssociated > 0 ? \n  ((totalResidentSubstitutions / totalAssociated) * 100).toFixed(1) : '0';\n\nconsole.log('\\n=== PHASE 2 SMART RESIDENT ASSOCIATION RESULTS ===');\nconsole.log(`Total master assignments processed: ${totalMasterAssignments}`);\nconsole.log(`Successful resident associations: ${totalAssociated}`);\nconsole.log(`Unassigned master assignments: ${unassignedMasterAssignments.length}`);\nconsole.log(`Association rate: ${associationRate}%`);\nconsole.log(`Resident absence substitutions applied: ${totalResidentSubstitutions} (${substitutionRate}% of associations)`);\n\nconsole.log('\\n=== BLOCK STATISTICS ===');\nObject.entries(blockStats).forEach(([block, stats]) => {\n  const blockTotal = stats.associated + stats.unassigned;\n  const blockRate = blockTotal > 0 ? ((stats.associated / blockTotal) * 100).toFixed(1) : '0';\n  const absenceRate = stats.associated > 0 ? ((stats.residentSubstitutions / stats.associated) * 100).toFixed(1) : '0';\n  console.log(`Block ${block}: ${stats.associated}/${blockTotal} (${blockRate}%) - ${stats.residentSubstitutions} substitutions (${absenceRate}%)`);\n});\n\nif (residentSubstitutions.length > 0) {\n  console.log('\\n=== SAMPLE RESIDENT ABSENCE SUBSTITUTIONS ===');\n  residentSubstitutions.slice(0, 5).forEach((sub, index) => {\n    console.log(`${index + 1}. ${sub.originalActivity} → \"${sub.substitutedActivity}\"`);\n    console.log(`   Resident: ${sub.residentId}, Absence: ${sub.absenceInfo?.absenceType}`);\n  });\n}\n\nif (unassignedMasterAssignments.length > 0) {\n  console.log('\\n=== SAMPLE UNASSIGNED MASTER ASSIGNMENTS ===');\n  unassignedMasterAssignments.slice(0, 5).forEach((unassigned, index) => {\n    console.log(`${index + 1}. Master Assignment ${unassigned.Master_Assignment_ID} - Block ${unassigned.Block_ID}`);\n    console.log(`   Reason: ${unassigned.Reason}`);\n  });\n}\n\nconst revolutionaryImpact = {\n  preventedOrphanAssignments: totalResidentSubstitutions,\n  phase5EliminationJustification: totalResidentSubstitutions > 0 ? \n    'SUCCESS - Resident substitutions applied during association' : 'Limited impact',\n  estimatedPhase6ReductionDueToFewerOrphans: Math.floor(totalResidentSubstitutions * 0.5),\n  workflowEfficiencyGain: totalResidentSubstitutions > 0 ? \n    'REVOLUTIONARY - No post-hoc resident overrides needed' : 'Standard',\n  dataIntegrityImprovement: unassignedMasterAssignments.length < (totalMasterAssignments * 0.05) ? \n    'EXCELLENT' : 'Good',\n  continuousAbsenceAwareness: 'Faculty (Phase 1) + Resident (Phase 2) absence integration complete'\n};\n\nreturn [{\n  json: {\n    phase: 2,\n    phase_name: 'Smart Resident Association (Absence-Aware)',\n    success: true,\n    resident_associations: residentAssociations,\n    unassigned_master_assignments: unassignedMasterAssignments,\n    resident_substitutions: residentSubstitutions,\n    block_statistics: blockStats,\n    processing_statistics: {\n      total_master_assignments: totalMasterAssignments,\n      total_associated: totalAssociated,\n      total_unassigned: unassignedMasterAssignments.length,\n      association_rate: associationRate + '%',\n      resident_substitution_count: totalResidentSubstitutions,\n      substitution_rate: substitutionRate + '%'\n    },\n    revolutionary_impact: revolutionaryImpact,\n    integration_with_phase0: {\n      resident_absence_entries_used: Object.keys(residentAbsences).length,\n      verbatim_replacements_applied: totalResidentSubstitutions,\n      orphan_prevention_success: totalResidentSubstitutions > 0,\n      continuous_absence_awareness: 'Phase 1 (Faculty) + Phase 2 (Residents) = Complete'\n    },\n    integration_with_phase1: {\n      master_assignments_processed: totalMasterAssignments,\n      smart_pairings_enhanced: 'Phase 1 faculty + Phase 2 resident absence awareness',\n      workflow_continuity: 'Maintained intelligent, absence-aware approach'\n    },\n    next_phase: 3,\n    ready_for_phase3: totalAssociated > 0,\n    processing_timestamp: new Date().toISOString()\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 400],
      "id": "phase2-smart-association-engine",
      "name": "Phase 2: Smart Association Engine"
    },
    {
      "parameters": {
        "jsCode": "\n// FORMAT RESIDENT ASSOCIATIONS FOR AIRTABLE UPDATE\nconsole.log('=== FORMATTING RESIDENT ASSOCIATIONS FOR AIRTABLE ===');\n\nconst input = $input.first().json;\nconst residentAssociations = input.resident_associations || [];\nconst summary = input.processing_statistics || {};\n\nconsole.log(`Formatting ${residentAssociations.length} resident associations for Airtable update`);\n\n// Field ID mappings for Master Assignments table\nconst FIELD_IDS = {\n  RESIDENT_FROM_RBS: 'fldResidentFromRBS',\n  PGY_LINK_FROM_RBS: 'fldPGYLinkFromRBS',\n  RESIDENT_AVAILABLE: 'fldResidentAvailable',\n  PROCESSING_PHASE: 'fldProcessingPhase',\n  ASSIGNMENT_TYPE: 'fldAssignmentType',\n  RESIDENT_SUBSTITUTION_APPLIED: 'fldResidentSubstitutionApplied',\n  FINAL_ACTIVITY_NAME: 'fldFinalActivityName',\n  ASSIGNMENT_SCORE: 'fldAssignmentScore',\n  ASSIGNMENT_DATE: 'fldAssignmentDate'\n};\n\n// Format associations for updating Master Assignments table using field IDs\nconst airtableUpdates = residentAssociations.map(association => ({\n  id: association.Master_Assignment_ID,\n  fields: {\n    [FIELD_IDS.RESIDENT_FROM_RBS]: [association.Resident_ID],\n    [FIELD_IDS.PGY_LINK_FROM_RBS]: [association.PGY_Level],\n    [FIELD_IDS.RESIDENT_AVAILABLE]: association.Resident_Available,\n    [FIELD_IDS.PROCESSING_PHASE]: 'Phase 2 - Smart Association',\n    [FIELD_IDS.ASSIGNMENT_TYPE]: association.Absence_Substitution && association.Absence_Substitution.absenceApplied ? \n      'Resident Absence Substitution' : 'Standard Resident Assignment',\n    [FIELD_IDS.RESIDENT_SUBSTITUTION_APPLIED]: association.Absence_Substitution && association.Absence_Substitution.absenceApplied,\n    [FIELD_IDS.FINAL_ACTIVITY_NAME]: association.Final_Activity,\n    [FIELD_IDS.ASSIGNMENT_SCORE]: association.Absence_Substitution && association.Absence_Substitution.absenceApplied ? 0.85 : 1.0,\n    [FIELD_IDS.ASSIGNMENT_DATE]: new Date().toISOString().split('T')[0]\n  },\n  _metadata: {\n    residentName: association.Resident_Name,\n    pgyLevel: association.PGY_Level,\n    originalActivity: association.Original_Activity,\n    finalActivity: association.Final_Activity,\n    absenceApplied: association.Absence_Substitution && association.Absence_Substitution.absenceApplied,\n    absenceInfo: association.Absence_Substitution ? association.Absence_Substitution.absenceInfo : null,\n    alternativeResidents: association.Alternative_Residents ? association.Alternative_Residents.length : 0\n  }\n}));\n\nconsole.log(`Created ${airtableUpdates.length} Airtable update records`);\n\nconsole.log('\\n=== SAMPLE AIRTABLE UPDATE RECORDS ===');\nairtableUpdates.slice(0, 3).forEach((record, index) => {\n  console.log(`${index + 1}. ${record._metadata.residentName} (${record._metadata.pgyLevel})`);\n  console.log(`   Activity: ${record._metadata.finalActivity}`);\n  console.log(`   Type: ${record.fields[FIELD_IDS.ASSIGNMENT_TYPE]}`);\n  console.log(`   Substitution: ${record.fields[FIELD_IDS.RESIDENT_SUBSTITUTION_APPLIED]}`);\n});\n\nconst batchSummary = {\n  total_updates: airtableUpdates.length,\n  standard_assignments: airtableUpdates.filter(r => !r.fields[FIELD_IDS.RESIDENT_SUBSTITUTION_APPLIED]).length,\n  substitution_assignments: airtableUpdates.filter(r => r.fields[FIELD_IDS.RESIDENT_SUBSTITUTION_APPLIED]).length,\n  estimated_batch_count: Math.ceil(airtableUpdates.length / 10),\n  processing_time_estimate: Math.ceil(airtableUpdates.length / 10) + ' minutes'\n};\n\nconsole.log('\\n=== BATCH PROCESSING SUMMARY ===');\nconsole.log(`Total updates: ${batchSummary.total_updates}`);\nconsole.log(`Standard assignments: ${batchSummary.standard_assignments}`);\nconsole.log(`Substitution assignments: ${batchSummary.substitution_assignments}`);\nconsole.log(`Estimated batches: ${batchSummary.estimated_batch_count}`);\nconsole.log(`Estimated processing time: ${batchSummary.processing_time_estimate}`);\n\nreturn airtableUpdates.map(record => ({ json: record }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 400],
      "id": "format-resident-associations-for-airtable",
      "name": "Format Resident Associations for Airtable"
    },
    {
      "parameters": {
        "batchSize": 10,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1100, 400],
      "id": "batch-resident-association-records",
      "name": "Batch Resident Association Records"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [1300, 400],
      "id": "wait-phase2-rate-limit",
      "name": "Wait (Rate Limiting)",
      "webhookId": "phase2-smart-wait"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://api.airtable.com/v0/appDgFtrU7njCKDW5/Master%20Assignments/{{ $json.id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "airtableTokenApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"fields\": {{ JSON.stringify($json.fields) }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1500, 400],
      "id": "update-master-assignments-with-residents",
      "name": "Update Master Assignments with Residents",
      "credentials": {
        "airtableTokenApi": {
          "id": "jaswG7byACjIoa6L",
          "name": "Airtable Personal Access Token account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "\n// PHASE 2 COMPLETION SUMMARY AND VALIDATION\nconsole.log('=== PHASE 2 COMPLETION SUMMARY ===');\n\nconst phase2Results = $('Phase 2: Smart Association Engine').first().json;\nconst airtableResults = $input.all();\n\nconst successfulUpdates = airtableResults.filter(result => \n  result.json && result.json.id && !result.json.error\n).length;\n\nconst totalUpdateAttempts = airtableResults.length;\nconst stats = phase2Results.processing_statistics;\nconst impact = phase2Results.revolutionary_impact;\nconst phase0Integration = phase2Results.integration_with_phase0;\nconst phase1Integration = phase2Results.integration_with_phase1;\n\nconst completionSummary = {\n  phase: 2,\n  phase_name: 'Smart Resident Association Complete',\n  resident_association_results: {\n    total_master_assignments: stats.total_master_assignments,\n    successful_associations: stats.total_associated,\n    unassigned_assignments: stats.total_unassigned,\n    association_rate: stats.association_rate,\n    resident_substitutions: stats.resident_substitution_count,\n    substitution_rate: stats.substitution_rate\n  },\n  airtable_operations: {\n    update_attempts: totalUpdateAttempts,\n    successful_updates: successfulUpdates,\n    success_rate: totalUpdateAttempts > 0 ? \n      ((successfulUpdates / totalUpdateAttempts) * 100).toFixed(1) + '%' : '0%'\n  },\n  phase0_integration_success: {\n    resident_absence_data_utilized: phase0Integration.resident_absence_entries_used > 0,\n    verbatim_replacements_applied: phase0Integration.verbatim_replacements_applied,\n    orphan_prevention_active: phase0Integration.orphan_prevention_success,\n    continuous_absence_awareness: phase0Integration.continuous_absence_awareness\n  },\n  phase1_integration_success: {\n    smart_pairings_enhanced: phase1Integration.smart_pairings_enhanced,\n    master_assignments_processed: phase1Integration.master_assignments_processed,\n    workflow_continuity_maintained: phase1Integration.workflow_continuity\n  },\n  revolutionary_improvements: {\n    resident_orphan_prevention: impact.preventedOrphanAssignments,\n    phase5_elimination_progress: impact.phase5EliminationJustification,\n    workflow_efficiency_gain: impact.workflowEfficiencyGain,\n    data_integrity: impact.dataIntegrityImprovement,\n    end_to_end_absence_awareness: impact.continuousAbsenceAwareness\n  },\n  quality_metrics: {\n    intelligent_association: successfulUpdates > 0,\n    resident_absence_awareness: stats.resident_substitution_count > 0,\n    resident_availability_verified: true,\n    no_orphan_assignments_created: stats.total_unassigned >= 0,\n    ready_for_phase3: successfulUpdates > 0\n  },\n  critical_insights: [\n    `${stats.resident_substitution_count} resident absence substitutions applied immediately`,\n    `Phase 5 workload reduced by ${stats.resident_substitution_count} resident substitutions`,\n    'Resident availability checked BEFORE creating associations',\n    'Complete absence awareness: Faculty (Phase 1) + Residents (Phase 2)',\n    'Verbatim comment replacement active for both faculty and residents'\n  ],\n  next_phase: 3,\n  ready_for_phase3: successfulUpdates > (totalUpdateAttempts * 0.8),\n  processing_complete: new Date().toISOString()\n};\n\nconsole.log('\\n=== PHASE 2 REVOLUTIONARY RESULTS ===');\nconsole.log(`Resident associations: ${completionSummary.resident_association_results.successful_associations} (${completionSummary.resident_association_results.association_rate})`);\nconsole.log(`Resident substitutions: ${completionSummary.resident_association_results.resident_substitutions} (${completionSummary.resident_association_results.substitution_rate} of associations)`);\nconsole.log(`Orphan assignments prevented: ${completionSummary.revolutionary_improvements.resident_orphan_prevention}`);\nconsole.log(`Airtable success rate: ${completionSummary.airtable_operations.success_rate}`);\nconsole.log(`Ready for Phase 3: ${completionSummary.ready_for_phase3}`);\n\nconsole.log('\\n=== CRITICAL WORKFLOW IMPROVEMENTS ===');\ncompletionSummary.critical_insights.forEach((insight, index) => {\n  console.log(`${index + 1}. ${insight}`);\n});\n\nconst validationResults = {\n  phase0_data_loaded: phase0Integration.resident_absence_entries_used > 0,\n  phase1_integration_working: phase1Integration.master_assignments_processed > 0,\n  smart_association_active: stats.total_associated > 0,\n  resident_absence_substitution_working: stats.resident_substitution_count >= 0,\n  airtable_integration_successful: successfulUpdates > 0\n};\n\nconst allValidationsPassed = Object.values(validationResults).every(v => v === true);\n\nconsole.log('\\n=== VALIDATION RESULTS ===');\nObject.entries(validationResults).forEach(([check, passed]) => {\n  const status = passed ? '✅' : '❌';\n  const checkName = check.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  console.log(`${status} ${checkName}: ${passed ? 'PASSED' : 'FAILED'}`);\n});\n\nif (allValidationsPassed && completionSummary.ready_for_phase3) {\n  console.log('\\n🎉 PHASE 2 SMART RESIDENT ASSOCIATION SUCCESSFULLY COMPLETED!');\n  console.log('   End-to-end absence awareness is now complete!');\n  console.log('   Phase 5 elimination is strongly on track!');\n  console.log('   Ready for enhanced Phase 3 faculty assignment!');\n} else {\n  console.log('\\n⚠️  PHASE 2 VALIDATION ISSUES DETECTED');\n  console.log('   Review failed validations before proceeding to Phase 3');\n}\n\ncompletionSummary.validation_results = validationResults;\ncompletionSummary.all_validations_passed = allValidationsPassed;\n\nreturn [{\n  json: completionSummary\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1700, 400],
      "id": "phase2-completion-summary",
      "name": "Phase 2 Completion Summary"
    }
  ],
  "connections": {
    "Start Phase 2: Smart Resident Association": {
      "main": [
        [
          {
            "node": "Fetch Phase 1 Master Assignments",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Residency Block Schedule",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Half-Day Blocks Reference",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Phase 1 Master Assignments": {
      "main": [
        [
          {
            "node": "Merge Phase 2 Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Residency Block Schedule": {
      "main": [
        [
          {
            "node": "Merge Phase 2 Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Fetch Half-Day Blocks Reference": {
      "main": [
        [
          {
            "node": "Merge Phase 2 Data",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge Phase 2 Data": {
      "main": [
        [
          {
            "node": "Phase 2: Smart Association Engine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Phase 2: Smart Association Engine": {
      "main": [
        [
          {
            "node": "Format Resident Associations for Airtable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Resident Associations for Airtable": {
      "main": [
        [
          {
            "node": "Batch Resident Association Records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Batch Resident Association Records": {
      "main": [
        [
          {
            "node": "Wait (Rate Limiting)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait (Rate Limiting)": {
      "main": [
        [
          {
            "node": "Update Master Assignments with Residents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Master Assignments with Residents": {
      "main": [
        [
          {
            "node": "Phase 2 Completion Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true,
    "description": "Phase 2: Revolutionary resident association using field IDs for all Airtable operations",
    "version": "2.0.0",
    "author": "Medical Scheduling Optimization Team"
  },
  "phase2_specifications": {
    "purpose": "Intelligently associate residents with master assignments using Phase 0 absence data and Phase 1 smart pairings",
    "revolutionary_features": {
      "field_id_based_operations": "All Airtable operations use field IDs instead of names for reliability",
      "resident_absence_awareness": "Checks resident availability BEFORE creating associations",
      "verbatim_resident_substitution": "Applies resident absence comments as replacement activities immediately",
      "orphan_prevention": "Only associates available residents or creates substitutions",
      "phase5_elimination_continuation": "Continues the elimination of post-hoc leave overrides",
      "end_to_end_absence_integration": "Completes the Faculty (Phase 1) + Resident (Phase 2) absence awareness"
    },
    "field_id_mappings": {
      "master_assignments_table": {
        "half_day_of_week_blocks": "fldHalfDayOfWeekBlocks",
        "rotation_templates": "fldRotationTemplates",
        "processing_phase": "fldProcessingPhase",
        "resident_from_rbs": "fldResidentFromRBS",
        "pgy_link_from_rbs": "fldPGYLinkFromRBS",
        "resident_available": "fldResidentAvailable",
        "assignment_type": "fldAssignmentType",
        "resident_substitution_applied": "fldResidentSubstitutionApplied",
        "final_activity_name": "fldFinalActivityName",
        "assignment_score": "fldAssignmentScore",
        "assignment_date": "fldAssignmentDate"
      },
      "residency_block_schedule_table": {
        "name": "fld9jU1b60KFqZSWx",
        "resident": "fldq0D4a6GevQSbhz",
        "block": "fldSm2tVzmgKpwAMH",
        "pgy_year": "fld1gvZ5vL0gkrJ4W"
      },
      "half_day_blocks_reference_table": {
        "date_of_day_of_week_block": "fldDateOfDayOfWeekBlock",
        "time_of_day": "fldTimeOfDay",
        "day_of_the_week_of_block": "fldDayOfTheWeekOfBlock",
        "block": "fldBlock",
        "week_of_the_block": "fldWeekOfTheBlock"
      }
    },
    "input_dependencies": [
      "Phase 0 absence data (CRITICAL - resident absence lookup)",
      "Phase 1 master assignments (smart pairings with faculty already handled)",
      "Residency Block Schedule (resident scheduling)",
      "Half-Day Blocks reference (date/time resolution)"
    ],
    "key_improvements_over_original": {
      "field_id_reliability": "Uses field IDs throughout to prevent field rename issues",
      "absence_integration": "Checks resident absences before association",
      "immediate_substitution": "Applies resident absence substitutions during association, not later",
      "intelligent_resident_selection": "Prioritizes available residents, handles absent ones with substitutions",
      "workflow_continuity": "Maintains the intelligent approach from Phase 1",
      "phase5_elimination": "Further reduces Phase 5 workload with resident substitutions"
    },
    "outputs": [
      "Master Assignments with residents associated (updated records using field IDs)",
      "Resident absence substitution log",
      "Unassigned master assignments (requiring manual review)",
      "Block-by-block association statistics",
      "Phase 3 readiness assessment"
    ],
    "success_criteria": [
      "≥80% of master assignments successfully associated with residents",
      "Resident absence substitutions applied immediately",
      "Phase 0 and Phase 1 data successfully integrated",
      "No orphaned resident associations created",
      "Ready for Phase 3 faculty assignment processing",
      "All Airtable operations use field IDs for reliability"
    ]
  }
}
